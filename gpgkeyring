#!/usr/bin/env python

import argparse
import subprocess
from collections import namedtuple

KeyEntry = namedtuple('KeyEntry', ['hexcode', 'identities'])
KeyIdentity = namedtuple('KeyIdentity', ['name', 'email'])


def get_gpg_key_entries(keyring_name):
    return parse_list_keys(get_gpg_list_keys(keyring_name))


def get_gpg_list_keys(keyring_name):
    cmd = ['gpg', '--keyring', keyring_name, '--no-default-keyring', '--with-colons', '--list-keys']
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if p.returncode == 0:
        return stdout
    else:
        raise AssertionError(stderr)


def parse_list_keys(stdout):
    """
    lines look like

    pub:-:2048:1:XXXXXXXXXXXXXXXX:2016-06-15:::-:Meredith Yemail (http\x3a//www.dimagi.com/) <myemail@dimagi.com>::scESC:
    uid:-::::2016-06-17::XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX::Meredith Yemail <myemail@gmail.com>:
    
    """
    
    def parse_hexcode(long_hex_code):
        return long_hex_code[-8:]

    def parse_identity(name_comment_email):
        """
        takes from the following formats:
            'Meredith Yemail (Comment) <myemail@dimagi.com>'
            'Meredith Yemail <myemail@dimagi.com>'
        to
            ('Meredith Yemail', 'myemail@dimagi.com')
            
        """
        
        if '(' in name_comment_email and ')' in name_comment_email:
            name = name_comment_email.split('(')[0].strip()
            email = name_comment_email.split(')')[-1].strip()[1:-1]
        else:
            name = name_comment_email.split('<')[0].strip()
            email = name_comment_email.split('<')[-1][:-1]
        return KeyIdentity(name, email)

    table = (fields for fields in (line.split(':') for line in stdout.split('\n')))

    key_entries = []

    for fields in table:
        if 'pub' == fields[0]:
            _, _, _, _, long_hex_code, _, _, _, _, name_comment_email, _, _, _ = fields
            key_entry = KeyEntry(
                hexcode=parse_hexcode(long_hex_code),
                identities=[parse_identity(name_comment_email)],
            )
            key_entries.append(key_entry)
        elif 'uid' == fields[0]:
            _, _, _, _, _, _, _, _, _, name_comment_email, _ = fields
            key_entry = key_entries[-1]
            key_entry.identities.append(parse_identity(name_comment_email))
    return key_entries


def normalize_keyring_name(keyring_name):
    if keyring_name.startswith('/') or keyring_name.startswith('../') or keyring_name.startswith('./'):
        return keyring_name
    else:
        return './' + keyring_name


class ShowCommand(object):
    def __init__(self, keyring_name, email_domain):
        self.keyring_name = keyring_name
        self.email_domain = email_domain

    def run(self):
        for key_entry in get_gpg_key_entries(self.keyring_name):
            if self.email_domain:
                key_identities = [ki for ki in key_entry.identities
                                  if ki.email.split('@')[-1] == self.email_domain]
            else:
                key_identities = key_entry.identities

            if key_identities:
                for key_identity in key_identities:
                    print '{}\t{}\t{}'.format(key_identity.name, key_identity.email, key_entry.hexcode)
            else:
                raise AssertionError(
                    'None of the given emails match {!r}: {!r}'
                    .format(self.email_domain, key_entry.identities)
                )
    

def run_show_command(keyring_name, email_domain):
    ShowCommand(keyring_name, email_domain).run()


def run():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='command', dest='command')

    parser_show = subparsers.add_parser('show', help='show the keyring contents')
    parser_show.add_argument('keyring')
    parser_show.add_argument('--email-domain', dest='email_domain')

    args = parser.parse_args()

    if args.command == 'show':
        keyring_name = normalize_keyring_name(args.keyring)
        run_show_command(keyring_name, email_domain=args.email_domain)


if __name__ == '__main__':
    run()
